{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEUA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,e;AAEXC,sB,GAAa,I;AACbC,iB,GAAO,I;;yCAEEC,iB;AACT,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACH;;;;oDAEqB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AAClC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;AACAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACH,6BAFD;AAGAR,wCAAYS,SAAZ,GAAwB,aAAI;AACxB,oCAAG,CAAChB,UAAJ,EAAgB;AACZA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAMD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAN;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BATD;AAUAO,wCAAYW,OAAZ,GAAsB,aAAI;AACtBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBAnBM,CAAP;AAoBH;;;iDAEmBtB,U,EAAW;AAC3BH,+BAAO0B,OAAP,CAAe,iBAAQ;AACnB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACA1B,WAAW2B,iBAAX;;AAEJ3B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACC,yBALD;AAMH;;;sDAEuB;AACpB,4BAAI7B,UAAJ,EAAgB;AACZC;AACAD,yCAAW,IAAX;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["\r\n\r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'negociacoesDB';\r\n    \r\n    var connection = null;\r\n    var close =null;\r\n\r\n    export class ConnectionFactory{\r\n        constructor(){\r\n            throw new Error('Não é possível instanciar esta classe');\r\n        }\r\n\r\n        static getConnection(){\r\n            return new Promise((resolve, reject)=>{\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStore(e.target.result);\r\n                };\r\n                openRequest.onsuccess = e =>{\r\n                    if(!connection) {\r\n                        connection = e.target.result;\r\n                        close=connection.close.bind(connection);\r\n                        connection.close = function(){\r\n                            throw new Error(\"não é possível fechar a conexão\");\r\n                        };\r\n                    }\r\n                    resolve(connection);\r\n                };\r\n                openRequest.onerror = e =>{\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                };\r\n            });\r\n        }\r\n\r\n        static _createStore(connection){\r\n            stores.forEach(store =>{\r\n                if(connection.objectStoreNames.contains(store)) \r\n                connection.deleteObjectStore\r\n\r\n            connection.createObjectStore(store, {autoIncrement: true});\r\n            });\r\n        }\r\n\r\n        static closeConnection(){\r\n            if (connection) {\r\n                close();\r\n                connection=null;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n"]}